/**
 * MedServerCapstone
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package project.capstone6.acne_diagnosis.apis
import project.capstone6.acne_diagnosis.infrastructure.*

class ImageApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param filename  
     * @return void
     */
    fun apiImageFilenameGet(filename: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/Image/{filename}".replace("{" + "filename" + "}", "$filename")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param imageSource  (optional)
     * @param imageFile  (optional)
     * @return void
     */
    fun apiImagePost(imageSource: kotlin.String? = null, imageFile: kotlin.Array<kotlin.Byte>? = null): Unit {
        val localVariableBody: kotlin.Any? = mapOf("ImageSource" to "$imageSource", "ImageFile" to "$imageFile")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/Image", headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
